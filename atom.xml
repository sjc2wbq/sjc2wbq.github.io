<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>NOTES</title>
  <subtitle>hardworking</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sjc2wbq.github.io/"/>
  <updated>2017-05-17T02:15:51.000Z</updated>
  <id>http://sjc2wbq.github.io/</id>
  
  <author>
    <name>JunChuan Shi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ivar and property</title>
    <link href="http://sjc2wbq.github.io/2017/05/02/objc-ivar-and-property/"/>
    <id>http://sjc2wbq.github.io/2017/05/02/objc-ivar-and-property/</id>
    <published>2017-05-02T14:13:33.000Z</published>
    <updated>2017-05-17T02:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>成员变量</strong>：</p>
<p>定义了一个类的全局变量（不直接被外部访问，只能通过方法读或写）</p>
<p><strong>属性</strong>:</p>
<p>提供了getter和setter方法的成员变量（直接能被外部访问）</p>
<p>由此而知：当在OC里面默认申明一个属性，如果没有关联相应的成员变量会默认生成一个以下划线开头+属性名的成员变量<br><a id="more"></a><br>@property声明setter getter方法</p>
<p>@synthesize定义setter getter方法</p>
<p>在Xcode4.5及以后的版本中，可以省略@synthesize编译器会自动帮你加上setter getter方法，并且默认会去访问_age这个成员变量，如果找不到_age这个成员变量，会自动生成一个叫做 _age的私有成员变量。在.m文件中同时实现getter和setter方法时候需要@synthesize age = _age或者在.h文件里手写成员变量 NSString *_age</p>
<p><strong>ivar</strong>:<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_ivar *Ivar;</div></pre></td></tr></table></figure></p>
<p><strong>objc_ivar结构体定义如下</strong>：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_ivar &#123;</div><div class="line">    <span class="keyword">char</span> *ivar_name                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *ivar_type                                          OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">int</span> ivar_offset                                          OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#ifdef __LP64__</span></div><div class="line">    <span class="keyword">int</span> space                                                OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;成员变量&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;定义了一个类的全局变量（不直接被外部访问，只能通过方法读或写）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;属性&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;提供了getter和setter方法的成员变量（直接能被外部访问）&lt;/p&gt;
&lt;p&gt;由此而知：当在OC里面默认申明一个属性，如果没有关联相应的成员变量会默认生成一个以下划线开头+属性名的成员变量&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>choochoo</title>
    <link href="http://sjc2wbq.github.io/2016/08/19/choochoo/"/>
    <id>http://sjc2wbq.github.io/2016/08/19/choochoo/</id>
    <published>2016-08-19T06:16:33.000Z</published>
    <updated>2016-11-24T04:08:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="我们家楚楚最好"><a href="#我们家楚楚最好" class="headerlink" title="我们家楚楚最好"></a>我们家楚楚最好</h1>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;我们家楚楚最好&quot;&gt;&lt;a href=&quot;#我们家楚楚最好&quot; class=&quot;headerlink&quot; title=&quot;我们家楚楚最好&quot;&gt;&lt;/a&gt;我们家楚楚最好&lt;/h1&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>runtime</title>
    <link href="http://sjc2wbq.github.io/2016/08/19/runtime/"/>
    <id>http://sjc2wbq.github.io/2016/08/19/runtime/</id>
    <published>2016-08-19T03:44:21.000Z</published>
    <updated>2017-05-17T02:08:09.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h4><blockquote>
<p>包含多个变量或者数组的集合</p>
</blockquote>
<p>1.结构体定义<br>struct 结构体名{<br>  变量或数组<br>};<br>2.结构体定义，并且初始化结构体变量 struct1<br>struct 结构体名{<br>  。。。<br>}结构体变量名struct1;</p>
<p><a href="www.jianshu.com/p/41735c66dccb">OC中的类</a></p>
<h4 id="isa"><a href="#isa" class="headerlink" title="isa"></a>isa</h4><p>每个实例对象有个isa的指针，指向对象的类，Class也有isa的指针，指向MeteClass（元类）可以理解为表明所属权，声明了实例与所属类的关系</p>
<h4 id="运行时类的动态化处理（3步）"><a href="#运行时类的动态化处理（3步）" class="headerlink" title="运行时类的动态化处理（3步）"></a>运行时类的动态化处理（3步）</h4><ol>
<li>objc_allocateClassPair()   为 class pair 分配类存</li>
<li>class_addMethod() class_addIvar          添加方法或者成员变量</li>
<li>objc_registerClssPair()    注册类</li>
</ol>
<blockquote>
<p>class(类) pair(元类）</p>
</blockquote>
<p>Object-c的一个类也是一个对象，也可以发送消息给一个类</p>
<h4 id="类（Class）"><a href="#类（Class）" class="headerlink" title="类（Class）"></a>类（Class）</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"><span class="meta">#if !__OBJC2__</span></div><div class="line">    Class super_class                                        OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name                                         OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list *ivars                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list **methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache *cache                                 OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div></pre></td></tr></table></figure>
<h4 id="对象（id）"><a href="#对象（id）" class="headerlink" title="对象（id）"></a>对象（id）</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object &#123;</div><div class="line">    Class isa;</div><div class="line">&#125; *<span class="keyword">id</span>;</div></pre></td></tr></table></figure>
<ul>
<li>对象是一个含有指向类结构的指针isa的结构体<br>理解：id（每个对象）含有一个isa指向对应的类</li>
<li>Objective-C中对象最重要的特点是你可以发送消息给它们：<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="string">@"stringValue"</span></div><div class="line">    writeToFile:<span class="string">@"/file.txt"</span> atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Objective-C对象（这儿是NSCFString）在发送消息时，运行时库会追寻着对象的isa指针得到了对象所属的类（这儿是NSCFString类）。这个类包含了能应用于这个类的所有实例方法和指向超类的指针以便可以找到父类的实例方法。运行时库检查这个类和其超类的方法列表，找到一个匹配这条消息的方法（在上面的代码里，是NSString类的writeToFile:atomically:encoding:error方法）。运行时库基于那个方法调用函数（IMP）<br><br><strong> 重点就是类要定义这个你发送给对象的消息。 </strong></p>
<h4 id="元类pair"><a href="#元类pair" class="headerlink" title="元类pair"></a>元类pair</h4><p>Objective-C的一个类也是一个对象。这意味着你可以发送消息给一个类。</p>
<p><font color="yellow">总结说OC中所有的类都是一种对象。由一个类实例化来的对象叫实例对象，那么，类作为对象（称之为类对象），又是什么类的对象？就是元类（Metaclass）</font>元类就是类对象所属的类。所以，实例对象是类的实例，类作为对象又是元类的实例。已经说了，OC中所有的类都属于一种对象，所以元类也是对象，那么元类是什么的实例呢？答曰：根元类，根元类是其自身的实例.也就是说根元类的元类就是它自己。基类的元类的isa指针指向他自己。</p>
<ul>
<li>当你给对象发送消息时，消息是在寻找这个对象的类的方法列表。</li>
<li>当你给类发消息时，消息是在寻找这个类的元类的方法列表。</li>
</ul>
<p>用一张图表明他们之间的关系：<br><img src="http://oo5f0tnid.bkt.clouddn.com/1361289384_8487.PNG" alt="img"><br>注意：根元类的superclass不是nil而是根类。对于OC原生的类，根元类的父类就是系统的根类NSOject。但根类不一定是NSObject，因为后面介绍的objc_allocateClassPair函数也可创建出一个根类。<br><br><strong>元类是必不可少的，因为它存储了类的类方法。每个类都必须有独一无二的元类，因为每个类都有独一无二的<font color="yellow">类方法<font></font></font></strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSStringEncoding</span> defaultStringEncoding = [<span class="built_in">NSString</span> defaultStringEncoding];</div></pre></td></tr></table></figure>
<p>在这个示例里，defaultStringEncoding被发送给了NSString类。</p>
<p>因为Objective-C中每个类本身也是一个对象。如上面所展示的，这意味着类结构必须以一个isa指针开始，从而可以和objc_object在二进制层面兼容，然后这个结构的下一字段必须是一个指向超类的指针（对于基类则为nil）。</p>
<h4 id="实例对象、类对象、元类对象，有什么区别？"><a href="#实例对象、类对象、元类对象，有什么区别？" class="headerlink" title="实例对象、类对象、元类对象，有什么区别？"></a>实例对象、类对象、元类对象，有什么区别？</h4><ul>
<li><p>实例对象：当我们在代码中new一个实例对象时，拷贝了实例所属的类的成员变量，但不拷贝类定义的方法。调用实例方法时，根据实例的isa指针去寻找方法对应的函数指针。</p>
</li>
<li><p>类对象：是一个功能完整的对象。特殊之处在于它们是由程序员定义而在运行时由编译器创建的，它没有自己的实例变量（这里区别于类的成员变量，他们是属于实例对象的，而不是属于类对象的，类方法是属于类对象自己的），但类对象中存着成员变量与实例方法列表。</p>
</li>
<li><p>元类对象：OC 的类方法是使用元类的根本原因，因为其中存储着对应的类对象调用的方法即类方法。其他时候都倾向于隐藏元类，因此真实世界没有人发送消息给元类对象。元类的定义和创建看起来都是编译器自动完成的，无需人为干涉。要获取一个类的元类，可使用如下定义的函数：</p>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class objc_getMetaClass(<span class="keyword">const</span> <span class="keyword">char</span>* name); <span class="comment">//name为类的名字</span></div></pre></td></tr></table></figure>
<p>此外还有一个获取对象所属的类的函数：<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class object_getClass(<span class="keyword">id</span> obj) ;</div></pre></td></tr></table></figure></p>
<p>由于类对象是元类的实例，所以当传入的参数为类名时，返回的就是指向该类所属的元类的指针。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;包含多个变量或者数组的集合&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.结构体定义&lt;br&gt;struct 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>runtime的理解</title>
    <link href="http://sjc2wbq.github.io/2016/08/16/runtime%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://sjc2wbq.github.io/2016/08/16/runtime的理解/</id>
    <published>2016-08-16T10:20:04.000Z</published>
    <updated>2017-05-17T02:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="runtime-运行时机制-详情"><a href="#runtime-运行时机制-详情" class="headerlink" title="runtime 运行时机制(详情)"></a>runtime 运行时机制(<a href="http://www.jianshu.com/p/6b905584f536" target="_blank" rel="external"><strong>详情</strong></a>)</h3><h4 id="1-是什么？"><a href="#1-是什么？" class="headerlink" title="1 是什么？"></a>1 是什么？</h4><blockquote>
<p>runtime是一套比较底层的C语言API，属于一个C语言库，包含了很多底层的C语言API<br>平时编写的OC代码，在程序运行过程中，其实都是转成了runtime的C语言代码，runtime算是OC的幕后工作者</p>
</blockquote>
<h4 id="2-相关的头文件和函数"><a href="#2-相关的头文件和函数" class="headerlink" title="2 相关的头文件和函数"></a>2 相关的头文件和函数</h4><blockquote>
<p>头文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;objc/runtime.h&gt;</div><div class="line">&lt;objc/message.h&gt;</div></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="3-特性"><a href="#3-特性" class="headerlink" title="3 特性"></a>3 特性</h4><blockquote>
<ul>
<li>可以动态地创建类</li>
<li>动态的添加变量和属性，动态地遍历变量和属性</li>
<li>动态地添加方法，转化方法</li>
</ul>
</blockquote>
<h4 id="4相关应用"><a href="#4相关应用" class="headerlink" title="4相关应用"></a>4相关应用</h4><h4 id="methodSwizzling"><a href="#methodSwizzling" class="headerlink" title="methodSwizzling"></a>methodSwizzling</h4><blockquote>
<p>比如公司项目后期突然提出新的需求要为所有页面添加统计功能，也就是用户进入这个页面就统计一次，</p>
</blockquote>
<p>  实现：给UIViewController写一个类别加到pch<br>  类别中新建一个swillingViewDidLoad方法<br>  在实现中，+(load)中运用runtime的method_exchangeImplementations替换掉系统的viewDidload方法和swillingViewDidLoad方法；<br>  在swillingViewDidLoad方法中加入统计方法，然后调用swillingViewDidLoad方法<br>  这样，当controller调用viewDidload时通过运行时，指向了自定义的swillingViewDidLoad，在这个方法里先执行了我们的统计方法，然后调用swillingViewDidload方法，指向系统的viewDidload方法，这样就实现了在每个类viewDidload前进行统计的操作。<br>  还有数组越界，给系统的NSArray 替换一个自定义objectAtIndex</p>
<h4 id="动态地给Category-添加属性详情"><a href="#动态地给Category-添加属性详情" class="headerlink" title="动态地给Category 添加属性详情"></a>动态地给Category 添加属性<a href="http://ios.jobbole.com/84341/" target="_blank" rel="external"><strong>详情</strong></a></h4><blockquote>
<p>分类里面不能添加Ivar是因为分类本身并不是一个真正的类，它并没有自己的ISA。有兴趣可以研究一下类是怎么被创建出来的，类最开始生成了很多基本属性，比如IvarList，MethodList，分类只会将自己的method attach到主类，并不会影响到主类的IvarList。这就是为什么分类里面不能增加成员变量的原因。</p>
</blockquote>
<p>  runtime中的category<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_category &#123;</div><div class="line"><span class="keyword">char</span> *category_name                                      OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">char</span> *class_name                                         OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_method_list *instance_methods                OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_method_list *class_methods                   OBJC2_UNAVAILABLE;</div><div class="line"><span class="keyword">struct</span> objc_protocol_list *protocols                     OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>  所有的关联对象都由AssociationsManager管理,而AssociationsManager定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> AssociationsManager &#123;</div><div class="line">    <span class="keyword">static</span> OSSpinLock _lock;</div><div class="line">    <span class="keyword">static</span> AssociationsHashMap *_map;               <span class="comment">// associative references:  object pointer -&gt; PtrPtrHashMap.</span></div><div class="line">public:</div><div class="line">    AssociationsManager()   &#123; OSSpinLockLock(&amp;_lock); &#125;</div><div class="line">    ~AssociationsManager()  &#123; OSSpinLockUnlock(&amp;_lock); &#125;</div><div class="line"></div><div class="line">    AssociationsHashMap &amp;associations() &#123;</div><div class="line">        <span class="keyword">if</span> (_map == <span class="literal">NULL</span>)</div><div class="line">            _map = new AssociationsHashMap();</div><div class="line">        <span class="keyword">return</span> *_map;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>  AssociationsManager里面是由一个静态AssociationsHashMap来存储所有的关联对象的。这相当于把所有对象的关联对象都存在一个全局map里面。而map的的key是这个对象的指针地址（任意两个不同对象的指针地址一定是不同的），而这个map的value又是另外一个AssociationsHashMap，里面保存了关联对象的kv对。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">void</span> *objc_destructInstance(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (obj) &#123;</div><div class="line">      Class isa_gen = _object_getClass(obj);</div><div class="line">      class_t *isa = newcls(isa_gen);</div><div class="line"></div><div class="line">      <span class="comment">// Read all of the flags at once for performance.</span></div><div class="line">      <span class="keyword">bool</span> cxx = hasCxxStructors(isa);</div><div class="line">      <span class="keyword">bool</span> assoc = !UseGC &amp; _class_instancesHaveAssociatedObjects(isa_gen);</div><div class="line"></div><div class="line">      <span class="comment">// This order is important.</span></div><div class="line">      <span class="keyword">if</span> (cxx) object_cxxDestruct(obj);</div><div class="line">      <span class="keyword">if</span> (assoc) _object_remove_assocations(obj);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (!UseGC) objc_clear_deallocating(obj);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  runtime的销毁对象函数objc_destructInstance里面会判断这个对象有没有关联对象，如果有，会调用_object_remove_assocations做关联对象的清理工作。</p>
<h4 id="NSCoding详情"><a href="#NSCoding详情" class="headerlink" title="NSCoding详情"></a>NSCoding<a href="http://www.cnblogs.com/junhuawang/p/5798827.html" target="_blank" rel="external"><strong>详情</strong></a></h4><blockquote>
<p><a href="http://www.jianshu.com/p/f2abb236eb6f" target="_blank" rel="external"><strong>归档和解档</strong></a>，利用runtime遍历模型对象的所有属性,写成宏文件</p>
</blockquote>
<h4 id="字典-–-gt-模型"><a href="#字典-–-gt-模型" class="headerlink" title="字典 –&gt; 模型"></a>字典 –&gt; 模型</h4><blockquote>
<p>利用runtime遍历模型对象的所有属性，根据属性名从字典中取出对应的值，设置到模型的属性上</p>
</blockquote>
<h4 id="KVO-原理-详情介绍"><a href="#KVO-原理-详情介绍" class="headerlink" title="KVO(原理)详情介绍"></a>KVO(<a href="http://sjc2wbq.github.io/2016/01/17/KVOandKVC/">原理</a>)<a href="http://www.cnblogs.com/starainDou/p/5108952.html" target="_blank" rel="external">详情介绍</a></h4><blockquote>
<p>利用runtime动态产生一个类</p>
</blockquote>
<h4 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a><a href="http://blog.csdn.net/coyote1994/article/details/52454600" target="_blank" rel="external">消息转发</a></h4><blockquote>
<p>当我们像一个对象发送消息［Receiver message］，Receiver没有实现该消息，即[Receiver respondsToSelector:SEL]返回为NO情况下，其实系统不会立刻出现crash，这时Runtime system会对message进行转发。转发之后，如果该消息依然没有被执行就会出现Crash！Runtime System为我们提供了三种解决这种给对象发送没有实现消息方案。</p>
</blockquote>
<ol>
<li>动态方法解析+ (BOOL)resolveInstanceMethod:(SEL)sel</li>
<li>备用接收者 - (id)forwardingTargetForSelector:(SEL)aSelector</li>
<li>完整转发 - (void)forwardInvocation:(NSInvocation *)anInvocation</li>
</ol>
<p><a href="https://zhidao.baidu.com/question/50557962.html" target="_blank" rel="external">API HOOK技术</a></p>
<h4 id="用于封装框架（想怎么改就怎么改）"><a href="#用于封装框架（想怎么改就怎么改）" class="headerlink" title="用于封装框架（想怎么改就怎么改）"></a>用于封装框架（想怎么改就怎么改）</h4><h4 id="万能界面跳转"><a href="#万能界面跳转" class="headerlink" title="万能界面跳转"></a><a href="http://blog.csdn.net/coyote1994/article/details/52472670" target="_blank" rel="external">万能界面跳转</a></h4><p>相关函数</p>
<ul>
<li>objc_msgSend :给对象发送消息</li>
<li>class_copyMethodList: 遍历某个类所有的方法</li>
<li>class_copyIvarList: 遍历某个类所有的成员变量</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;runtime-运行时机制-详情&quot;&gt;&lt;a href=&quot;#runtime-运行时机制-详情&quot; class=&quot;headerlink&quot; title=&quot;runtime 运行时机制(详情)&quot;&gt;&lt;/a&gt;runtime 运行时机制(&lt;a href=&quot;http://www.jia
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>7788总结</title>
    <link href="http://sjc2wbq.github.io/2016/08/15/7788%E6%80%BB%E7%BB%93/"/>
    <id>http://sjc2wbq.github.io/2016/08/15/7788总结/</id>
    <published>2016-08-14T21:28:42.000Z</published>
    <updated>2017-05-17T02:08:54.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>strong 与 copy 区别</strong>：</p>
<blockquote>
<p>使用strong，指向同一个地址，并且引用计数加1；而使用copy，是内容复制，创建一个新的内存区域</p>
</blockquote>
<ol>
<li>strong对应的setter方法，是将_property先release（_property release），然后将参数retain（property retain），最后是_property = property。</li>
<li>copy对应的setter方法，是将_property先release（_property release），然后拷贝参数内容（property copy），创建一块新的内存地址，最后_property = property。</li>
</ol>
<p><strong>深拷贝与浅拷贝</strong>：</p>
<ul>
<li>深拷贝：内容拷贝</li>
<li>浅拷贝：指针拷贝</li>
</ul>
<p><a href="http://www.jianshu.com/p/e6a7cdcc705d" target="_blank" rel="external">详情</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;strong 与 copy 区别&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用strong，指向同一个地址，并且引用计数加1；而使用copy，是内容复制，创建一个新的内存区域&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;stro
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>dyld</title>
    <link href="http://sjc2wbq.github.io/2016/08/14/dyld/"/>
    <id>http://sjc2wbq.github.io/2016/08/14/dyld/</id>
    <published>2016-08-13T17:42:33.000Z</published>
    <updated>2017-05-17T02:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html</a><br>the OS X dynamic linker</p>
<p> static linking, generally referred to simply as ‘linking’. This is the step that typically happens after compiling, where the machine language the compiler churned out from your source code, the object files, are ‘linked’ together into a single binary file</p>
<p> LLDB的Xcode默认的调试器，它与LLVM编译器一起，带给我们更丰富的流程控制和数据检测的调试功能</p>
<h3 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h3><p> <a href="http://ios.jobbole.com/92875/" target="_blank" rel="external">http://ios.jobbole.com/92875/</a></p>
<blockquote>
<p>The LLVM Project is a collection of modular and reusable compiler and toolchain technologies.</p>
</blockquote>
<p> LLVM架构的主要组成部分：</p>
<p>前端：前端用来获取源代码然后将它转变为某种中间表示，我们可以选择不同的编译器来作为LLVM的前端，如gcc，clang。<br>Pass(通常翻译为“流程”)：Pass用来将程序的中间表示之间相互变换。一般情况下，Pass可以用来优化代码，这部分通常是我们关注的部分。<br>后端：后端用来生成实际的机器码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.mikeash.com/pyblog/friday-qa-2012-11-09-dyld-dynamic-linking-on-os-x.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://ww
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何在iOS端web插入音乐并且自动顺序播放音乐</title>
    <link href="http://sjc2wbq.github.io/2016/07/05/music/"/>
    <id>http://sjc2wbq.github.io/2016/07/05/music/</id>
    <published>2016-07-04T20:19:21.000Z</published>
    <updated>2017-05-17T02:07:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>实现下如何在iOS端的网页中自动顺序播放多首歌曲：由于iOS端Safari安全机制的限制，iOS端中的web不能autoplay。</em></p>
<div class="note "><p><code>window.addEventListener(&#39;touchstart&#39;, forceSafariPlayAudio, false)</code>监听手势触发，做“伪”自动播放。</p>
</div>
<div class="note info"><p><code>audioEl.addEventListener(&#39;ended&#39;, function(){}，false)</code>方法监听歌曲播放结束时的状态，用七牛云存储获得音乐src，顺序播放三个曲目。</p>
</div>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">id</span>=<span class="string">"bgmusic"</span> <span class="attr">autoplay</span> <span class="attr">preload</span>  <span class="attr">controls</span> <span class="attr">hidden</span> <span class="attr">src</span> = <span class="string">'http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90-%E5%83%8F%E6%88%91%E8%BF%99%E4%B8%80%E7%A7%8D%E7%94%B7%E4%BA%BA.mp3'</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> audioEl = <span class="built_in">document</span>.getElementById(<span class="string">'bgmusic'</span>);<span class="comment">// 获得audio</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">audioEl.addEventListener(<span class="string">'ended'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  i = i + <span class="number">1</span>;</div><div class="line">  <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">1</span>)&#123; <span class="comment">// 对3取余替换音乐的src</span></div><div class="line">    audioEl.src=<span class="string">'http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90%20-%20%E5%90%BB%E5%BE%97%E5%88%B0%E7%88%B1%E4%B8%8D%E5%88%B0.mp3'</span>;</div><div class="line">    <span class="comment">// 曲目1</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">2</span>)&#123;</div><div class="line">      audioEl.src=<span class="string">'http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%B7%A8%E5%9F%BA,%E5%8F%A4%E5%A4%A9%E4%B9%90%20-%20%E5%BD%93%E5%B9%B4%E6%83%85.mp3'</span>;</div><div class="line">    <span class="comment">// 曲目2</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(i%<span class="number">3</span> == <span class="number">0</span>)&#123;</div><div class="line">    audioEl.src=<span class="string">'http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90-%E5%83%8F%E6%88%91%E8%BF%99%E4%B8%80%E7%A7%8D%E7%94%B7%E4%BA%BA.mp3'</span>;</div><div class="line">    <span class="comment">// 曲目3</span></div><div class="line">  &#125;</div><div class="line">  audioEl.play();</div><div class="line">&#125;, <span class="literal">false</span>);</div><div class="line"></div><div class="line"><span class="keyword">if</span>((navigator.userAgent.match(<span class="regexp">/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i</span>)))&#123;</div><div class="line">  <span class="comment">// 判断web端为移动端时，监听手势做“伪”自动播放</span></div><div class="line">  audioEl.autoplay = <span class="string">'autoplay'</span>;</div><div class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">info</span>) </span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(info);</div><div class="line">      &#125;</div><div class="line">      <span class="function"><span class="keyword">function</span> <span class="title">forceSafariPlayAudio</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          audioEl.load(); <span class="comment">// iOS 9   还需要额外的 load 一下, 否则直接 play 无效</span></div><div class="line">          audioEl.play(); <span class="comment">// iOS 7/8 仅需要 play 一下</span></div><div class="line">      &#125;</div><div class="line">      audioEl.addEventListener(<span class="string">'loadstart'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'loadstart'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'loadeddata'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'loadeddata'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'loadedmetadata'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'loadedmetadata'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'canplay'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'canplay'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'play'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'play'</span>);</div><div class="line">          <span class="comment">// 当 audio 能够播放后, 移除这个事件</span></div><div class="line">          <span class="built_in">window</span>.removeEventListener(<span class="string">'touchstart'</span>, forceSafariPlayAudio, <span class="literal">false</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'playing'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'playing'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      audioEl.addEventListener(<span class="string">'pause'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          log(<span class="string">'pause'</span>);</div><div class="line">      &#125;, <span class="literal">false</span>);</div><div class="line">      <span class="comment">// 由于 iOS Safari 限制不允许 audio autoplay, 必须用户主动交互(例如 click)后才能播放 audio</span></div><div class="line">      <span class="built_in">window</span>.addEventListener(<span class="string">'touchstart'</span>, forceSafariPlayAudio, <span class="literal">false</span>);</div><div class="line">  &#125;)();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<audio id="bgmusic" autoplay preload="" controls hidden src="http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90%20-%20%E5%90%BB%E5%BE%97%E5%88%B0%E7%88%B1%E4%B8%8D%E5%88%B0.mp3"></audio>

<script type="text/javascript">
var audioEl = document.getElementById('bgmusic');
var i = 0;
audioEl.addEventListener('ended', function() {  
  i = i + 1;

  if(i%3 == 1){
      audioEl.src='http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%B7%A8%E5%9F%BA,%E5%8F%A4%E5%A4%A9%E4%B9%90%20-%20%E5%BD%93%E5%B9%B4%E6%83%85.mp3';
    <!-- 当年情 -->
  }
  if(i%3 == 2){
    audioEl.src='http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90-%E5%83%8F%E6%88%91%E8%BF%99%E4%B8%80%E7%A7%8D%E7%94%B7%E4%BA%BA.mp3';
    <!--像我这一种男人 -->
  }
  if(i%3 == 0){
    audioEl.src='http://oo5fnv8gq.bkt.clouddn.com/%E5%8F%A4%E5%A4%A9%E4%B9%90%20-%20%E5%90%BB%E5%BE%97%E5%88%B0%E7%88%B1%E4%B8%8D%E5%88%B0.mp3';
    <!-- 吻得到爱不到 -->
  }


  audioEl.play();
}, false);
if((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))){
  //alert('移动端')
  audioEl.autoplay = 'autoplay';
  (function() {
      function log(info) {
          console.log(info);
          // alert(info);
      }
      function forceSafariPlayAudio() {
          audioEl.load(); // iOS 9   还需要额外的 load 一下, 否则直接 play 无效
          audioEl.play(); // iOS 7/8 仅需要 play 一下
      }
      audioEl.addEventListener('loadstart', function() {
          log('loadstart');
      }, false);
      audioEl.addEventListener('loadeddata', function() {
          log('loadeddata');
      }, false);
      audioEl.addEventListener('loadedmetadata', function() {
          log('loadedmetadata');
      }, false);
      audioEl.addEventListener('canplay', function() {
          log('canplay');
      }, false);
      audioEl.addEventListener('play', function() {
          log('play');
          // 当 audio 能够播放后, 移除这个事件
          window.removeEventListener('touchstart', forceSafariPlayAudio, false);
      }, false);
      audioEl.addEventListener('playing', function() {
          log('playing');
      }, false);
      audioEl.addEventListener('pause', function() {
          log('pause');
      }, false);
      // 由于 iOS Safari 限制不允许 audio autoplay, 必须用户主动交互(例如 click)后才能播放 audio,
      // 因此我们通过一个用户交互事件来主动 play 一下 audio.
      window.addEventListener('touchstart', forceSafariPlayAudio, false);


  })();
}
</script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;实现下如何在iOS端的网页中自动顺序播放多首歌曲：由于iOS端Safari安全机制的限制，iOS端中的web不能autoplay。&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;note &quot;&gt;&lt;p&gt;&lt;code&gt;window.addEventListener(&amp;#39;t
    
    </summary>
    
    
      <category term="html" scheme="http://sjc2wbq.github.io/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>regular expression of checkPhone</title>
    <link href="http://sjc2wbq.github.io/2016/06/02/regular-expressioncheckPhone/"/>
    <id>http://sjc2wbq.github.io/2016/06/02/regular-expressioncheckPhone/</id>
    <published>2016-06-02T06:25:41.000Z</published>
    <updated>2017-04-10T07:23:16.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>正则表达式是个神奇的东西，这种东东就该备着以防不时之需，哈哈。</em></p>
<p><img src="/image/regex.png" alt=""></p>
<blockquote>
<p>判断手机号的正则表达式</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">NSString</span> *)checkPhoneNum:(<span class="built_in">NSString</span> *)mobile&#123;</div><div class="line">    <span class="keyword">if</span> (mobile.length &lt; <span class="number">11</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">@"手机号长度只能是11位"</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">         <span class="comment">//移动号段正则表达式              </span></div><div class="line">        <span class="built_in">NSString</span> *<span class="built_in">CM_NUM</span> = <span class="string">@"^((13[4-9])|(147)|(15[0-2,7-9])|(178)|(18[2-4,7-8]))//d&#123;8&#125;|(1705)//d&#123;7&#125;$"</span>;</div><div class="line">        <span class="comment">// 联通号段正则表达式          </span></div><div class="line">        <span class="built_in">NSString</span> *CU_NUM = <span class="string">@"^((13[0-2])|(145)|(15[5-6])|(176)|(18[5,6]))//d&#123;8&#125;|(1709)//d&#123;7&#125;$"</span>;  </div><div class="line">         <span class="comment">//电信号段正则表达式             </span></div><div class="line">        <span class="built_in">NSString</span> *<span class="built_in">CT_NUM</span> = <span class="string">@"^((133)|(153)|(177)|(18[0,1,9]))//d&#123;8&#125;$"</span>;</div><div class="line">        <span class="built_in">NSPredicate</span> *pred1 = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, <span class="built_in">CM_NUM</span>];</div><div class="line">        <span class="built_in">BOOL</span> isMatch1 = [pred1 evaluateWithObject:mobile];</div><div class="line">        <span class="built_in">NSPredicate</span> *pred2 = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, CU_NUM];</div><div class="line">        <span class="built_in">BOOL</span> isMatch2 = [pred2 evaluateWithObject:mobile];</div><div class="line">        <span class="built_in">NSPredicate</span> *pred3 = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF MATCHES %@"</span>, <span class="built_in">CT_NUM</span>];</div><div class="line">        <span class="built_in">BOOL</span> isMatch3 = [pred3 evaluateWithObject:mobile];</div><div class="line">        <span class="keyword">if</span> (isMatch1 || isMatch2 || isMatch3) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">@"请输入正确的电话号码"</span>;</div><div class="line">        &#125;    </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>使用</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *phoneErr = [<span class="keyword">self</span> checkPhoneNum:strPhone];</div><div class="line"><span class="keyword">if</span>(strPhone) &#123;</div><div class="line">    [<span class="keyword">self</span> showAlertInfo:phoneErr];</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;正则表达式是个神奇的东西，这种东东就该备着以防不时之需，哈哈。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/image/regex.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;判断手机号的正则表达式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;fi
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="regular expression" scheme="http://sjc2wbq.github.io/tags/regular-expression/"/>
    
  </entry>
  
  <entry>
    <title>困</title>
    <link href="http://sjc2wbq.github.io/2016/05/31/%E5%9B%B0/"/>
    <id>http://sjc2wbq.github.io/2016/05/31/困/</id>
    <published>2016-05-31T03:21:55.000Z</published>
    <updated>2017-04-10T06:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">stay calm stay focus</blockquote><br><img src="/image/fighting.jpg" alt=""><br>  没睡好,很困,记一下:</p>
<blockquote>
<p>一个好用的库/(ㄒoㄒ)/~~</p>
</blockquote>
<ul>
<li><a href="https://github.com/forkingdog/FDFullscreenPopGesture" target="_blank" rel="external">左滑返回第三方框架</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;stay calm stay focus&lt;/blockquote&gt;&lt;br&gt;&lt;img src=&quot;/image/fighting.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;  没睡好,很困,记一下:&lt;/p&gt;
&lt;b
    
    </summary>
    
      <category term="life" scheme="http://sjc2wbq.github.io/categories/life/"/>
    
    
      <category term="困" scheme="http://sjc2wbq.github.io/tags/%E5%9B%B0/"/>
    
  </entry>
  
  <entry>
    <title>用Swift创建Singleton的几种方式</title>
    <link href="http://sjc2wbq.github.io/2016/04/28/%E7%94%A8Swift%E5%88%9B%E5%BB%BASingleton%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://sjc2wbq.github.io/2016/04/28/用Swift创建Singleton的几种方式/</id>
    <published>2016-04-28T12:40:41.000Z</published>
    <updated>2017-04-10T07:26:24.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>单例，作为日常中出场率较高的设计模式，还是值得单独一篇文章来列举下常见的创建方式，Objective-C 下，一般是这么创建单例。</em></p>
<h4 id="OC单例创建"><a href="#OC单例创建" class="headerlink" title="OC单例创建"></a>OC单例创建</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Persion</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@end</span></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Persion</span></span></div><div class="line">+ (<span class="keyword">instancetype</span>)sharedInstance &#123;</div><div class="line">    <span class="keyword">static</span> Persion *sharedInstance = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        sharedInstance = [[Persion alloc] init];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> sharedInstance;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在使用单例时我们需要知道:<div class="note "><p>单例是全局唯一,在程序的生命周期中不管在何处使用都应该是同一个对象。</p>
</div><div class="note info"><p>确保单例的唯一性,需要是初始化方法私有化,需要我们重载类的所有初始化方法。</p>
</div><div class="note warning"><p>也因为第一条，在生命周期中只有唯一一个，我们需要确保单例的线程安全。</p>
</div>下面列举几种swift单例的创建方法:</p>
<h4 id="先来一段比较丑的创建方式"><a href="#先来一段比较丑的创建方式" class="headerlink" title="先来一段比较丑的创建方式"></a>先来一段比较丑的创建方式</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> TheOneAndOnlyPerson &#123;</div><div class="line">    <span class="keyword">class</span> var sharedInstance: TheOneAndOnlyPerson &#123;</div><div class="line">        <span class="keyword">struct</span> Static &#123;</div><div class="line">            <span class="keyword">static</span> var onceToken: <span class="built_in">dispatch_once_t</span> = <span class="number">0</span></div><div class="line">            <span class="keyword">static</span> var instance: TheOneAndOnlyPerson? = <span class="literal">nil</span></div><div class="line">        &#125;</div><div class="line">        <span class="built_in">dispatch_once</span>(&amp;Static.onceToken) &#123;</div><div class="line">            Static.instance = TheOneAndOnlyPerson()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Static.instance!</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这有点违背了swift的简洁风格了吧~~pass（反正不推荐）</p>
<h4 id="结构体创建方式"><a href="#结构体创建方式" class="headerlink" title="结构体创建方式"></a>结构体创建方式</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> TheOneAndOnlyPerson &#123;</div><div class="line">    <span class="keyword">class</span> var sharedInstance: TheOneAndOnlyPerson &#123;</div><div class="line">        <span class="keyword">struct</span> Static &#123;</div><div class="line">            <span class="keyword">static</span> let instance = TheOneAndOnlyPerson()</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> Static.instance</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="一行创建单例-推荐"><a href="#一行创建单例-推荐" class="headerlink" title="一行创建单例 (推荐)"></a>一行创建单例 (推荐)</h4><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> TheOneAndOnlyPerson &#123;</div><div class="line">    <span class="keyword">static</span> let sharedInstance = TheOneAndOnlyPerson()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>不要忘了重载类的初始化方法</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;em&gt;单例，作为日常中出场率较高的设计模式，还是值得单独一篇文章来列举下常见的创建方式，Objective-C 下，一般是这么创建单例。&lt;/em&gt;&lt;/p&gt;
&lt;h4 id=&quot;OC单例创建&quot;&gt;&lt;a href=&quot;#OC单例创建&quot; class=&quot;headerlink&quot; title=&quot;OC单例创建&quot;&gt;&lt;/a&gt;OC单例创建&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Persion&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Persion&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+ (&lt;span class=&quot;keyword&quot;&gt;instancetype&lt;/span&gt;)sharedInstance &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Persion *sharedInstance = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sharedInstance = [[Persion alloc] init];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sharedInstance;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在使用单例时我们需要知道:&lt;div class=&quot;note &quot;&gt;&lt;p&gt;单例是全局唯一,在程序的生命周期中不管在何处使用都应该是同一个对象。&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;确保单例的唯一性,需要是初始化方法私有化,需要我们重载类的所有初始化方法。&lt;/p&gt;
&lt;/div&gt;&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;也因为第一条，在生命周期中只有唯一一个，我们需要确保单例的线程安全。&lt;/p&gt;
&lt;/div&gt;下面列举几种swift单例的创建方法:&lt;/p&gt;
&lt;h4 id=&quot;先来一段比较丑的创建方式&quot;&gt;&lt;a href=&quot;#先来一段比较丑的创建方式&quot; class=&quot;headerlink&quot; title=&quot;先来一段比较丑的创建方式&quot;&gt;&lt;/a&gt;先来一段比较丑的创建方式&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; TheOneAndOnlyPerson &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; var sharedInstance: TheOneAndOnlyPerson &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Static &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; var onceToken: &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; var instance: TheOneAndOnlyPerson? = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;Static.onceToken) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            Static.instance = TheOneAndOnlyPerson()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Static.instance!&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="swift" scheme="http://sjc2wbq.github.io/tags/swift/"/>
    
  </entry>
  
  <entry>
    <title>iOS开源项目收集</title>
    <link href="http://sjc2wbq.github.io/2016/04/20/show/"/>
    <id>http://sjc2wbq.github.io/2016/04/20/show/</id>
    <published>2016-04-20T14:50:45.000Z</published>
    <updated>2017-04-10T07:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note "><p>平时自己使用或者看过的iOS代码，收集于此，于己于人方便.项目会先在<a href="https://github.com/sjc2wbq" target="_blank" rel="external">github</a>更新，之后迁移到<a href="sjc2wbq.github.io">github.io</a> 上其他项目总结</p>
</div>
<ul>
<li><a href="https://github.com/Tim9Liu9/TimLiu-iOS#下拉刷新" target="_blank" rel="external">TimLiu-iOS</a> github iOS排行榜</li>
<li><a href="https://github.com/superleexpert/open-source-library-tags" target="_blank" rel="external">open-source-library-tags</a> 佳宾同学自己项目总结</li>
<li><a href="https://github.com/ipader/SwiftGuide/blob/master/Featured.md" target="_blank" rel="external">SwiftGuide Swift</a> 开源项目精选</li>
<li><a href="http://github.ibireme.com/github/list/ios/" target="_blank" rel="external">Github-iOS备忘</a> 分类、折叠查看 开源项目总结</li>
</ul>
<h3 id="UI部分"><a href="#UI部分" class="headerlink" title="UI部分"></a>UI部分</h3><div class="note info"><p>下拉刷新:</p>
</div>
- [MJRefresh](https://github.com/CoderMJLee/MJRefresh#上拉刷新07-自动回弹的上拉01) 国内人开发,看文档先列出来几点
  - 自定义程度高（文字，动图，heade、footer 等等）
  - 易使用
  - 中文文档，目前已经 4000 多 star
- [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) 应该算本人使用比较早的一个下拉，上拉刷新，api 较少，使用方便

<div class="note warning"><p>音视频播放:</p>
</div>
<ul>
<li><p><a href="https://github.com/36Kr-Mobile/KRVideoPlayer" target="_blank" rel="external">KRVideoPlayer</a><br>类似Weico的播放器，支持竖屏模式下全屏播放。支持 pod 安装使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search KRVideoPlayer</div></pre></td></tr></table></figure>
<p>使用MPMoviePlayer进行视频播放，自定义控制层 来控制视频的暂定，播放，前进后退等等</p>
<p>示例图片<br><img src="/image/kr_player.gif" alt=""></p>
<a id="more"></a>
<div class="note "><p>下一个效果:</p>
</div></li>
<li>图片相关<ul>
<li><a href="https://github.com/36Kr-Mobile/KRVideoPlayer" target="_blank" rel="external">Nuke (Swift)</a> 图片 下载、loading、缓存 的一个先进、轻量库</li>
</ul>
</li>
<li>模糊效果</li>
<li>AutoLayout</li>
</ul>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><ul>
<li><a href="https://github.com/cobub/razor" target="_blank" rel="external">razor 开源</a> 统计平台，包含 web , ios ,Android,wp 端代码</li>
<li><a href="https://github.com/evgenyneu/SigmaSwiftStatistics" target="_blank" rel="external">SigmaSwiftStatistics</a> lauguage: Swift 。 数学复杂计算</li>
<li><p><a href="https://github.com/krzyzanowskim/CryptoSwift" target="_blank" rel="external">CryptoSwift</a> 语言：Swift 。 主流的几种加密</p>
<ul>
<li><p>require</p>
<blockquote>
<p>一个好的心情</p>
</blockquote>
</li>
<li><p>功能</p>
<h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><ul>
<li>MD5</li>
<li>SHA1</li>
<li>SHA224</li>
<li>SHA256</li>
<li>SHA384</li>
<li>SHA512</li>
<li>CRC32 (well, kind of hash)</li>
<li>CRC16 (well, kind of hash)</li>
</ul>
<h4 id="Cipher"><a href="#Cipher" class="headerlink" title="Cipher"></a>Cipher</h4><ul>
<li>AES-128, AES-192, AES-256</li>
<li>ChaCha20</li>
</ul>
<h4 id="Message-authenticators"><a href="#Message-authenticators" class="headerlink" title="Message authenticators"></a>Message authenticators</h4><ul>
<li>Poly1305</li>
<li>HMAC MD5, SHA1, SHA256</li>
</ul>
<h4 id="Cipher-block-mode"><a href="#Cipher-block-mode" class="headerlink" title="Cipher block mode"></a>Cipher block mode</h4><ul>
<li>Electronic codebook (ECB)</li>
<li>Cipher-block chaining (CBC)</li>
<li>Cipher feedback (CFB)</li>
<li>Counter (CTR)</li>
</ul>
<h4 id="Data-padding"><a href="#Data-padding" class="headerlink" title="Data padding"></a>Data padding</h4><ul>
<li>PKCS#7</li>
</ul>
</li>
</ul>
</li>
<li>为什么要用swift 再写一次在很多平台都有的功能<blockquote>
<p>Why? Becanse I can.</p>
</blockquote>
</li>
</ul>
<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>时间选择器</li>
<li>其他选择器<ul>
<li><a href="https://github.com/krzyzanowskim/CryptoSwift" target="_blank" rel="external">城市列表</a> 带有当前城市，<br>热门城市，和按省分类列表</li>
</ul>
</li>
</ul>
<h3 id="display"><a href="#display" class="headerlink" title="display"></a>display</h3><ul>
<li><a href="https://github.com/xhzengAIB/MessageDisplayKit" target="_blank" rel="external">C-41</a> 这个app的功能不重要，重要的是演示了如何使用下边功能<ul>
<li>Core Data</li>
<li>Unit Test</li>
<li>ReactiveCocoa</li>
<li>Model-View-ViewModel</li>
</ul>
</li>
<li><a href="https://github.com/xhzengAIB/MessageDisplayKit" target="_blank" rel="external">MessageDisplayKit</a><br>一个类似微信App的IM应用，拥有发送文字、图片、语音、视频、地理位置消息，管理本地通信录、分享朋友圈、漂流交友、摇一摇和更多有趣的功能<br>支持 pod<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;MessageDisplayKi&apos;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/image/MessageDisplayKit.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note &quot;&gt;&lt;p&gt;平时自己使用或者看过的iOS代码，收集于此，于己于人方便.项目会先在&lt;a href=&quot;https://github.com/sjc2wbq&quot;&gt;github&lt;/a&gt;更新，之后迁移到&lt;a href=&quot;sjc2wbq.github.io&quot;&gt;github.io&lt;/a&gt; 上其他项目总结&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Tim9Liu9/TimLiu-iOS#下拉刷新&quot;&gt;TimLiu-iOS&lt;/a&gt; github iOS排行榜&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/superleexpert/open-source-library-tags&quot;&gt;open-source-library-tags&lt;/a&gt; 佳宾同学自己项目总结&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/ipader/SwiftGuide/blob/master/Featured.md&quot;&gt;SwiftGuide Swift&lt;/a&gt; 开源项目精选&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://github.ibireme.com/github/list/ios/&quot;&gt;Github-iOS备忘&lt;/a&gt; 分类、折叠查看 开源项目总结&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UI部分&quot;&gt;&lt;a href=&quot;#UI部分&quot; class=&quot;headerlink&quot; title=&quot;UI部分&quot;&gt;&lt;/a&gt;UI部分&lt;/h3&gt;&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;下拉刷新:&lt;/p&gt;
&lt;/div&gt;
- [MJRefresh](https://github.com/CoderMJLee/MJRefresh#上拉刷新07-自动回弹的上拉01) 国内人开发,看文档先列出来几点
  - 自定义程度高（文字，动图，heade、footer 等等）
  - 易使用
  - 中文文档，目前已经 4000 多 star
- [SVPullToRefresh](https://github.com/samvermette/SVPullToRefresh) 应该算本人使用比较早的一个下拉，上拉刷新，api 较少，使用方便

&lt;div class=&quot;note warning&quot;&gt;&lt;p&gt;音视频播放:&lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/36Kr-Mobile/KRVideoPlayer&quot;&gt;KRVideoPlayer&lt;/a&gt;&lt;br&gt;类似Weico的播放器，支持竖屏模式下全屏播放。支持 pod 安装使用&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pod search KRVideoPlayer&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用MPMoviePlayer进行视频播放，自定义控制层 来控制视频的暂定，播放，前进后退等等&lt;/p&gt;
&lt;p&gt;示例图片&lt;br&gt;&lt;img src=&quot;/image/kr_player.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="pieces colloction" scheme="http://sjc2wbq.github.io/tags/pieces-colloction/"/>
    
  </entry>
  
  <entry>
    <title>Blog</title>
    <link href="http://sjc2wbq.github.io/2016/03/20/Blog/"/>
    <id>http://sjc2wbq.github.io/2016/03/20/Blog/</id>
    <published>2016-03-20T05:29:02.000Z</published>
    <updated>2017-04-10T07:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note "><p>架构设计</p>
</div>
<p>博客中谈了较多架构层的干货，可以关注下</p>
<ul>
<li><a href="http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html" target="_blank" rel="external">iOS应用架构谈 开篇</a></li>
<li><a href="http://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html" target="_blank" rel="external">iOS应用架构谈 view层的组织和调用方案</a></li>
<li><a href="http://casatwy.com/iosying-yong-jia-gou-tan-wang-luo-ceng-she-ji-fang-an.html" target="_blank" rel="external">iOS应用架构谈 网络层设计方案</a></li>
<li><a href="http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html" target="_blank" rel="external">iOS应用架构谈 本地持久化方案及动态部署</a></li>
</ul>
<p><a href="http://www.jianshu.com/p/921ab32c3c71" target="_blank" rel="external">iOS大型项目开发漫谈</a> cp 个人见解总会有很多地方值得看<br><br><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a>专业的界面调优下面简单列几条概要:</p>
<ul>
<li>CPU 资源消耗原因和解决方案 （分析）</li>
<li>GPU 资源消耗原因和解决方案 （分析）</li>
<li>AsyncDisplayKit （解决方案）</li>
<li>微博 Demo 性能优化技巧 （示例讲解）</li>
</ul>
<div class="note info"><p>干货</p>
</div>
<p><a href="http://blog.ibireme.com" target="_blank" rel="external">伽蓝之堂</a><br>干货之多，受益无穷。大量自己实践总结，优秀国际技术翻译引进。举例：</p>
<ul>
<li><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">iOS 保持界面流畅的技巧</a></li>
<li><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/" target="_blank" rel="external">深入理解RunLoop</a></li>
<li><a href="http://blog.ibireme.com/2013/08/12/color-model/" target="_blank" rel="external">颜色模型</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;note &quot;&gt;&lt;p&gt;架构设计&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;博客中谈了较多架构层的干货，可以关注下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://casatwy.com/iosying-yong-jia-gou-tan-kai-pian.html
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="pieces" scheme="http://sjc2wbq.github.io/tags/pieces/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://sjc2wbq.github.io/2016/03/01/pic/"/>
    <id>http://sjc2wbq.github.io/2016/03/01/pic/</id>
    <published>2016-03-01T01:35:22.000Z</published>
    <updated>2016-05-20T04:06:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="/image/4.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/image/2.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/image/3.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="/image/1.jpg" alt=""></div></div></div></div>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot; style=&quot;widt
    
    </summary>
    
      <category term="life" scheme="http://sjc2wbq.github.io/categories/life/"/>
    
    
  </entry>
  
  <entry>
    <title>pieces colloction</title>
    <link href="http://sjc2wbq.github.io/2016/03/01/7788/"/>
    <id>http://sjc2wbq.github.io/2016/03/01/7788/</id>
    <published>2016-03-01T01:35:22.000Z</published>
    <updated>2016-05-20T04:10:48.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><h2 id="formatter设置：-formatter-stringFromDate-date"><a href="#formatter设置：-formatter-stringFromDate-date" class="headerlink" title="formatter设置： [formatter stringFromDate:date]"></a>formatter设置： <em>[formatter stringFromDate:date]</em></h2></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDate</span> *date = _datePicker.date;</div><div class="line"><span class="built_in">NSDateFormatter</span> *formatter = [<span class="built_in">NSDateFormatter</span> new];</div><div class="line">formatter.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss"</span>;</div><div class="line"><span class="built_in">NSString</span> *tempStr = [formatter stringFromDate:date];</div><div class="line"><span class="comment">//2014-05-06 16:22:22 -&gt; yyyy-MM-dd HH:mm:ss</span></div></pre></td></tr></table></figure>
<ul>
<li><h2 id="appearance-全局布局以及attributes设置navigationBar"><a href="#appearance-全局布局以及attributes设置navigationBar" class="headerlink" title="appearance 全局布局以及attributes设置navigationBar"></a>appearance 全局布局以及attributes设置navigationBar</h2></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//BarTintcolor</span></div><div class="line">[[<span class="built_in">UINavigationBar</span> appearance]setBarTintColor:[<span class="built_in">UIColor</span> orangeColor]];</div><div class="line">[[<span class="built_in">UINavigationBar</span> appearance]setTranslucent:<span class="literal">NO</span>];</div><div class="line">[<span class="built_in">UIView</span> appearance].backgroundColor = [<span class="built_in">UIColor</span> whiteColor];</div><div class="line">[[<span class="built_in">UINavigationBar</span> appearance]setTitleTextAttributes:@&#123;<span class="built_in">NSForegroundColorAttributeName</span>: [<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"534530"</span>],<span class="built_in">NSFontAttributeName</span>:[<span class="built_in">UIFont</span> systemFontOfSize:<span class="number">22</span>]&#125;];</div><div class="line">[[<span class="built_in">UITableView</span> appearance]setSeparatorColor:[<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"9c896f"</span>]];</div><div class="line">[[<span class="built_in">UIBarButtonItem</span> appearance]setTintColor:[<span class="built_in">UIColor</span> colorFromHexCode:<span class="string">@"726754"</span>]];</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *attributes = [<span class="built_in">NSDictionary</span> dictionaryWithObjectsAndKeys:[<span class="built_in">UIColor</span> whiteColor],<span class="built_in">NSForegroundColorAttributeName</span>,<span class="literal">nil</span>];</div><div class="line">[nav.navigationBar setTitleTextAttributes:attributes];</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h2 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h2><blockquote>
<p>当前时间距离1970年的秒数</p>
</blockquote>
</li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDate</span> *date = [<span class="built_in">NSDate</span> date];<span class="comment">//当前时间</span></div><div class="line">        <span class="built_in">NSTimeInterval</span> timeStamp = [date timeIntervalSince1970];</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="本地文件url"><a href="#本地文件url" class="headerlink" title="本地文件url"></a>本地文件url</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="built_in">NSURL</span> fileURLWithPath:path]</div></pre></td></tr></table></figure>
</li>
<li><h2 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h2><blockquote>
<p>只有multabalAry = [multabalAry copy]才是浅拷贝？</p>
</blockquote>
</li>
<li><h2 id="自定义分组tableView的headView"><a href="#自定义分组tableView的headView" class="headerlink" title="自定义分组tableView的headView"></a>自定义分组tableView的headView</h2></li>
</ul>
<p><strong>注册</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[_tableView registerClass:[<span class="built_in">UITableViewHeaderFooterView</span> <span class="keyword">class</span>] forHeaderFooterViewReuseIdentifier:<span class="string">@"HeaderView"</span>];</div></pre></td></tr></table></figure></p>
<p><strong>重用</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">UIView</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView viewForHeaderInSection:(<span class="built_in">NSInteger</span>)section&#123;</div><div class="line">    <span class="built_in">UITableViewHeaderFooterView</span> *view = [tableView dequeueReusableHeaderFooterViewWithIdentifier:<span class="string">@"HeaderView"</span>];</div><div class="line">    <span class="keyword">return</span> view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><h2 id="关闭系统对图片的渲染让图片始终保持原样，storyboard图片属性-Render-as：original-image"><a href="#关闭系统对图片的渲染让图片始终保持原样，storyboard图片属性-Render-as：original-image" class="headerlink" title="关闭系统对图片的渲染让图片始终保持原样，storyboard图片属性 Render as：original image"></a>关闭系统对图片的渲染让图片始终保持原样，storyboard图片属性 Render as：original image</h2></li>
<li><h2 id="取随机数-arc4random"><a href="#取随机数-arc4random" class="headerlink" title="取随机数 arc4random()"></a>取随机数 arc4random()</h2></li>
<li><h2 id="线程单例"><a href="#线程单例" class="headerlink" title="线程单例"></a>线程单例</h2></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+(TwoViewController *)sharedTwoVC&#123;</div><div class="line">    <span class="keyword">static</span> TwoViewController *twoVc = <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        twoVc = [<span class="keyword">self</span> new];</div><div class="line">        twoVc.navi = [[<span class="built_in">UINavigationController</span> alloc]initWithRootViewController:twoVc];</div><div class="line">        twoVc.title = <span class="string">@"two"</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> twoVc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="tableview去掉横线左右空白"><a href="#tableview去掉横线左右空白" class="headerlink" title="tableview去掉横线左右空白"></a>tableview去掉横线左右空白</h2></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cell.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line">cell.layoutMargins = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line">cell.preservesSuperviewLayoutMargins = <span class="literal">NO</span>;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="xib创建view时，自定义view的layer"><a href="#xib创建view时，自定义view的layer" class="headerlink" title="xib创建view时，自定义view的layer"></a>xib创建view时，自定义view的layer</h2></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)awakeFromNib&#123;</div><div class="line">    [<span class="keyword">self</span>.gifImage.layer setCornerRadius:<span class="number">9</span>];</div><div class="line">    [<span class="keyword">self</span>.gifImage.layer setMasksToBounds:<span class="literal">YES</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><h2 id="启动页设置"><a href="#启动页设置" class="headerlink" title="启动页设置"></a>启动页设置</h2></li>
</ul>
<ul>
<li><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2></li>
</ul>
<blockquote>
<p>1-8,4-7,5-6</p>
</blockquote>
<ol>
<li>init (初始化)</li>
<li>loadView （执行一次）<blockquote>
<p>手动重写时，需要手动创建Controller的view（可以手动自定义一个view或者[super loadView]）（如果不重写loadView会自动通过[super loadView]）</p>
</blockquote>
</li>
<li>viewDidLoad （执行一次）</li>
<li>ViewWillAppear （多次执行）</li>
<li>ViewDidAppear （多次执行）<blockquote>
<p>视图跳转时</p>
</blockquote>
</li>
<li>ViewWillDisAppear （多次执行）</li>
<li>ViewDidDisAppear （多次执行）</li>
<li>dealloc （销毁控制器）</li>
</ol>
<p>###</p>
<ul>
<li><h2 id="回传数据方式-return和block回调的区别-return方式是顺序执行完才返回，会占据当前线程资源，不允许其他任务执行，而block不会，block则是在耗时操作做完后“通知”你，然后回调"><a href="#回传数据方式-return和block回调的区别-return方式是顺序执行完才返回，会占据当前线程资源，不允许其他任务执行，而block不会，block则是在耗时操作做完后“通知”你，然后回调" class="headerlink" title="回传数据方式 return和block回调的区别:return方式是顺序执行完才返回，会占据当前线程资源，不允许其他任务执行，而block不会，block则是在耗时操作做完后“通知”你，然后回调"></a>回传数据方式 return和block回调的区别:return方式是顺序执行完才返回，会占据当前线程资源，不允许其他任务执行，而block不会，block则是在耗时操作做完后“通知”你，然后回调</h2><p>（比方 ：去买手抓饼，block形式：你把电话号给了老板，让他做完通知你，你可以去做其他事（回调））</p>
<pre><code>return：你在旁边等着，直到饼做完，才能做其他事
</code></pre><p>-(KindModel *)func{<br>//各种操作，耗时<br>  return XX;<br>}</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;formatter设置：-formatter-stringFromDate-date&quot;&gt;&lt;a href=&quot;#formatter设置：-formatter-stringFromDate-date&quot; class=&quot;headerlink&quot; title=&quot;formatter设置： [formatter stringFromDate:date]&quot;&gt;&lt;/a&gt;formatter设置： &lt;em&gt;[formatter stringFromDate:date]&lt;/em&gt;&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDate&lt;/span&gt; *date = _datePicker.date;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDateFormatter&lt;/span&gt; *formatter = [&lt;span class=&quot;built_in&quot;&gt;NSDateFormatter&lt;/span&gt; new];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;formatter.dateFormat = &lt;span class=&quot;string&quot;&gt;@&quot;yyyy-MM-dd HH:mm:ss&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *tempStr = [formatter stringFromDate:date];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//2014-05-06 16:22:22 -&amp;gt; yyyy-MM-dd HH:mm:ss&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h2 id=&quot;appearance-全局布局以及attributes设置navigationBar&quot;&gt;&lt;a href=&quot;#appearance-全局布局以及attributes设置navigationBar&quot; class=&quot;headerlink&quot; title=&quot;appearance 全局布局以及attributes设置navigationBar&quot;&gt;&lt;/a&gt;appearance 全局布局以及attributes设置navigationBar&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//BarTintcolor&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UINavigationBar&lt;/span&gt; appearance]setBarTintColor:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; orangeColor]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UINavigationBar&lt;/span&gt; appearance]setTranslucent:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; appearance].backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UINavigationBar&lt;/span&gt; appearance]setTitleTextAttributes:@&amp;#123;&lt;span class=&quot;built_in&quot;&gt;NSForegroundColorAttributeName&lt;/span&gt;: [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorFromHexCode:&lt;span class=&quot;string&quot;&gt;@&quot;534530&quot;&lt;/span&gt;],&lt;span class=&quot;built_in&quot;&gt;NSFontAttributeName&lt;/span&gt;:[&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; systemFontOfSize:&lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;]&amp;#125;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; appearance]setSeparatorColor:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorFromHexCode:&lt;span class=&quot;string&quot;&gt;@&quot;9c896f&quot;&lt;/span&gt;]];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[[&lt;span class=&quot;built_in&quot;&gt;UIBarButtonItem&lt;/span&gt; appearance]setTintColor:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorFromHexCode:&lt;span class=&quot;string&quot;&gt;@&quot;726754&quot;&lt;/span&gt;]];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *attributes = [&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; dictionaryWithObjectsAndKeys:[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor],&lt;span class=&quot;built_in&quot;&gt;NSForegroundColorAttributeName&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[nav.navigationBar setTitleTextAttributes:attributes];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="pieces colloction" scheme="http://sjc2wbq.github.io/tags/pieces-colloction/"/>
    
  </entry>
  
  <entry>
    <title>tableViewCell、collectionViewCell </title>
    <link href="http://sjc2wbq.github.io/2016/02/14/Tableview/"/>
    <id>http://sjc2wbq.github.io/2016/02/14/Tableview/</id>
    <published>2016-02-14T01:35:22.000Z</published>
    <updated>2016-05-20T04:02:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li>注册重用法</li>
<li>tableview自适应高度</li>
<li>tableview撤销高亮</li>
<li>参数的传递<ol>
<li>纯代码（didselectRow）</li>
<li>storyBoard方式（prepareForSegue）</li>
</ol>
</li>
</ul>
<h3 id="tableViewCell、collectionViewCell重用注册法"><a href="#tableViewCell、collectionViewCell重用注册法" class="headerlink" title="tableViewCell、collectionViewCell重用注册法"></a>tableViewCell、collectionViewCell重用注册法</h3><blockquote>
<ol>
<li><strong>纯代码</strong>注册时用<strong>registerClass</strong>如下图示例</li>
<li><strong>xib界面</strong>注册时用<strong>registerNib</strong>作(tableView或collectionView)的cell  </li>
<li><strong>storyboard</strong></li>
</ol>
</blockquote>
<ul>
<li><h4 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="keyword">self</span>.myCollectionView registerClass:[MycollectionViewCell <span class="keyword">class</span>]</div><div class="line">         forCellWithReuseIdentifier:<span class="string">@"cell"</span>];</div><div class="line"></div><div class="line">[<span class="keyword">self</span>.myCollectionView registerNib:[<span class="built_in">UINib</span> nibWithNibName:<span class="string">@"mycollectionCell"</span></div><div class="line">                            bundle:<span class="literal">nil</span>]</div><div class="line">         forCellWithReuseIdentifier:cellIndentify];</div></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><h4 id="重用方法"><a href="#重用方法" class="headerlink" title="重用方法"></a>重用方法</h4></li>
</ul>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MycollectionViewCell *cell;</div><div class="line">cell = [collectionView dequeueReusableCellWithReuseIdentifier:cellIndentify</div><div class="line">                                                  forIndexPath:indexPath];</div></pre></td></tr></table></figure>
<h3 id="让tableViewCell横线没有空隙"><a href="#让tableViewCell横线没有空隙" class="headerlink" title="让tableViewCell横线没有空隙"></a>让tableViewCell横线没有空隙</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cell.separatorInset = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line">cell.layoutMargins = <span class="built_in">UIEdgeInsetsZero</span>;</div><div class="line">cell.preservesSuperviewLayoutMargins = <span class="literal">NO</span>;</div></pre></td></tr></table></figure>
<h3 id="tableview自适应高度"><a href="#tableview自适应高度" class="headerlink" title="tableview自适应高度"></a>tableview自适应高度</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">CGFloat</span>)tableView:(<span class="built_in">UITableView</span> *)tableView estimatedHeightForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="built_in">UITableViewAutomaticDimension</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="tableView-编辑操作"><a href="#tableView-编辑操作" class="headerlink" title="tableView 编辑操作"></a>tableView 编辑操作</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//编辑的状态</span></div><div class="line">-(<span class="built_in">UITableViewCellEditingStyle</span>)tableView:(<span class="built_in">UITableView</span> *)tableView editingStyleForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">UITableViewCellEditingStyleDelete</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//左滑时的题目</span></div><div class="line">-(<span class="built_in">NSString</span> *)tableView:(<span class="built_in">UITableView</span> *)tableView titleForDeleteConfirmationButtonForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">@"删除此诗"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//编辑状态下的操作</span></div><div class="line">-(<span class="keyword">void</span>)tableView:(<span class="built_in">UITableView</span> *)tableView commitEditingStyle:(<span class="built_in">UITableViewCellEditingStyle</span>)editingStyle forRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPathP&#123;</div><div class="line">    <span class="keyword">if</span> (editingStyle == <span class="built_in">UITableViewCellEditingStyleDelete</span>) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;注册重用法&lt;/li&gt;
&lt;li&gt;tableview自适应高度&lt;/li&gt;
&lt;li&gt;tableview撤销高亮&lt;/li&gt;
&lt;li&gt;参数的传递&lt;ol&gt;
&lt;li&gt;纯代码（didselectRow）&lt;/li&gt;
&lt;li&gt;storyBoard方式（prepareForSegue）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;tableViewCell、collectionViewCell重用注册法&quot;&gt;&lt;a href=&quot;#tableViewCell、collectionViewCell重用注册法&quot; class=&quot;headerlink&quot; title=&quot;tableViewCell、collectionViewCell重用注册法&quot;&gt;&lt;/a&gt;tableViewCell、collectionViewCell重用注册法&lt;/h3&gt;&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;纯代码&lt;/strong&gt;注册时用&lt;strong&gt;registerClass&lt;/strong&gt;如下图示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;xib界面&lt;/strong&gt;注册时用&lt;strong&gt;registerNib&lt;/strong&gt;作(tableView或collectionView)的cell  &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;storyboard&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;注册方法&quot;&gt;&lt;a href=&quot;#注册方法&quot; class=&quot;headerlink&quot; title=&quot;注册方法&quot;&gt;&lt;/a&gt;注册方法&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myCollectionView registerClass:[MycollectionViewCell &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         forCellWithReuseIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;cell&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.myCollectionView registerNib:[&lt;span class=&quot;built_in&quot;&gt;UINib&lt;/span&gt; nibWithNibName:&lt;span class=&quot;string&quot;&gt;@&quot;mycollectionCell&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                            bundle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;         forCellWithReuseIdentifier:cellIndentify];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="tableView" scheme="http://sjc2wbq.github.io/tags/tableView/"/>
    
  </entry>
  
  <entry>
    <title>file system</title>
    <link href="http://sjc2wbq.github.io/2016/02/14/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>http://sjc2wbq.github.io/2016/02/14/文件系统/</id>
    <published>2016-02-14T01:35:22.000Z</published>
    <updated>2016-05-20T04:13:03.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>ios的文件管理有1.属性列表2.归档3.数据库(SQLite)4.coreData4种方式</p>
</blockquote>
<h1 id="属性列表Plist"><a href="#属性列表Plist" class="headerlink" title="属性列表Plist"></a>属性列表Plist</h1><h2 id="IPA的存储空间"><a href="#IPA的存储空间" class="headerlink" title="IPA的存储空间"></a>IPA的存储空间</h2><h3 id="沙盒-Sandbox-读可写"><a href="#沙盒-Sandbox-读可写" class="headerlink" title="沙盒        Sandbox :读可写"></a>沙盒        Sandbox :读可写</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *docPath = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>).firstObject;</div></pre></td></tr></table></figure>
<h3 id="应用程序文件-Bundle-只读"><a href="#应用程序文件-Bundle-只读" class="headerlink" title="应用程序文件 Bundle :只读"></a>应用程序文件 Bundle :只读</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *settingPath = [[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"Setting"</span> ofType:<span class="string">@"plist"</span>];</div></pre></td></tr></table></figure>
<h2 id="手动创建plist文件"><a href="#手动创建plist文件" class="headerlink" title="手动创建plist文件"></a>手动创建plist文件</h2><h3 id="info-Plist"><a href="#info-Plist" class="headerlink" title="info.Plist"></a>info.Plist</h3><blockquote>
<p>系统plist文件</p>
<h4 id="通过对应的key获取info-plist中的信息"><a href="#通过对应的key获取info-plist中的信息" class="headerlink" title="通过对应的key获取info.plist中的信息"></a>通过对应的key获取info.plist中的信息</h4><p>如版本号versio</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSDictionary</span> *infoDic = [[<span class="built_in">NSBundle</span> mainBundle] infoDictionary];</div><div class="line"><span class="built_in">NSString</span> *versionNumber = infoDic[versionKey];</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="配置一个自定义plist"><a href="#配置一个自定义plist" class="headerlink" title="配置一个自定义plist"></a>配置一个自定义plist</h3><blockquote>
<ol>
<li>首次运行时,需要有一个默认的配置文件plist(模板,通常是bundle中的plist)</li>
<li>因为用户要能够修改配置,bundle中的文件是只读, 所以要把bundle中的模板写到Documents文件夹下</li>
</ol>
</blockquote>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol>
<li>创建一个模板（plist）</li>
<li>运行时检查是否复制过模板到Documents下,没复制过 就复制一份</li>
<li>设置页面显示时,读取Documents目录下的模板,把相关设置显示在界面上</li>
<li>当用户更改设置时,同步修改对应模板</li>
</ol>
<h2 id="系统自动创建plist：NSUserDefaults"><a href="#系统自动创建plist：NSUserDefaults" class="headerlink" title="系统自动创建plist：NSUserDefaults"></a>系统自动创建plist：NSUserDefaults</h2><ul>
<li>本质上就是一个plist文不过是系统提供的.</li>
<li>存储的位置在沙盒(SandBox) ~/Library/Preferences/</li>
</ul>
<p><strong>只有当我们添加过值(setObject)以后,这个文件才会自动生成</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUserDefaults</span> *userDefaults = [<span class="built_in">NSUserDefaults</span> standardUserDefaults];</div><div class="line">[userDefaults setObject:<span class="string">@"小明"</span> forKey:<span class="string">@"name"</span>];</div></pre></td></tr></table></figure></p>
<p><strong>额外的提供了向系统plist中存非对象类型的方法</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[userDefaults setInteger:<span class="number">12</span> forKey:<span class="string">@"age"</span>];</div><div class="line">[userDefaults setBool:<span class="literal">YES</span> forKey:<span class="string">@"Marry"</span>];</div></pre></td></tr></table></figure></p>
<p><strong>文件的写入,是在每个runloop时进行,我们可以手动调用保存的方法,防止系统以外崩溃而导致没有存储的情况发生</strong><br><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[userDefaults synchronize];</div></pre></td></tr></table></figure></p>
<h1 id="归档Archive"><a href="#归档Archive" class="headerlink" title="归档Archive"></a>归档Archive</h1><blockquote>
<p>归档/解档 : 压缩+解压缩<br> 把对象类型存到磁盘中的统一解决方案</p>
</blockquote>
<h2 id="被归档对象需要遵循-NSCoding协议"><a href="#被归档对象需要遵循-NSCoding协议" class="headerlink" title="被归档对象需要遵循 NSCoding协议"></a>被归档对象需要遵循 NSCoding协议</h2><blockquote>
<p>通过协议方法对被归档对象编码解码</p>
</blockquote>
<h3 id="对被归档对象编码"><a href="#对被归档对象编码" class="headerlink" title="对被归档对象编码"></a>对被归档对象编码</h3><blockquote>
<p>[aCoder encodeObject:self.name forKey:@”name”];</p>
</blockquote>
<h3 id="对被归档对象解码"><a href="#对被归档对象解码" class="headerlink" title="对被归档对象解码"></a>对被归档对象解码</h3><blockquote>
<p>self.name = [aDecoder decodeObjectForKey:@”name”];</p>
</blockquote>
<h2 id="归档操作"><a href="#归档操作" class="headerlink" title="归档操作"></a>归档操作</h2><blockquote>
<p>archiveRootObject</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> isSucessed = [<span class="built_in">NSKeyedArchiver</span> archiveRootObject:stu toFile:<span class="keyword">self</span>.archivePath];</div></pre></td></tr></table></figure>
<h2 id="解档操作"><a href="#解档操作" class="headerlink" title="解档操作"></a>解档操作</h2><blockquote>
<p>unarchiveObjectWithFile</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student *stu = [<span class="built_in">NSKeyedUnarchiver</span> unarchiveObjectWithFile:<span class="keyword">self</span>.archivePath];</div></pre></td></tr></table></figure>
<h2 id="RUNTIME类简化对象归档时的编码解码操作"><a href="#RUNTIME类简化对象归档时的编码解码操作" class="headerlink" title="RUNTIME类简化对象归档时的编码解码操作"></a>RUNTIME类简化对象归档时的编码解码操作</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)func&#123;</div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">Ivar *varList = class_copyIvarList(<span class="keyword">self</span>.class,&amp;outCount);</div><div class="line"><span class="comment">//参数1:要获取的属性列表所在的class类</span></div><div class="line"><span class="comment">//参数2:二级指针,回传属性的数量</span></div><div class="line"><span class="comment">//返回值:所有属性列表,不包含父类的</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(tmpIvar);</div><div class="line"><span class="comment">//从Ivar构造体中获取属性名字符串</span></div><div class="line">free(varList);</div><div class="line"><span class="comment">//varList用完必须释放，c语言没有自动释放</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="示例-将运用runtime的编码解码代码做成宏定义"><a href="#示例-将运用runtime的编码解码代码做成宏定义" class="headerlink" title="示例:将运用runtime的编码解码代码做成宏定义"></a>示例:将运用runtime的编码解码代码做成宏定义</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)encodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder&#123;</div><div class="line">    <span class="comment">//1.获取属性列表</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">    Ivar *varList = class_copyIvarList(<span class="keyword">self</span>.class, &amp;outCount);</div><div class="line">    <span class="comment">//2.通过for循环,对每个属性进行设置</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; outCount; i++) &#123;</div><div class="line">        <span class="comment">//Ivar是结构体,包含属性名等..</span></div><div class="line">        Ivar tmpIvar = varList[i];</div><div class="line">        <span class="comment">//从Ivar构造体中获取属性名字符串</span></div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(tmpIvar);</div><div class="line">        <span class="comment">//C字符串-&gt;OC字符串</span></div><div class="line">        <span class="comment">//3.获取属性的名称的字符串</span></div><div class="line">        <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithUTF8String:name];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"propertyName %@"</span>, propertyName);</div><div class="line">        <span class="comment">//KVC</span></div><div class="line">        <span class="keyword">id</span> obj = [<span class="keyword">self</span> valueForKey:propertyName];</div><div class="line">        <span class="comment">//4.通过KVC模式,获取对应的值</span></div><div class="line">        [aCoder encodeObject:obj forKey:propertyName];</div><div class="line">    &#125;</div><div class="line">    free(varList);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)initWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="comment">//1.拿属性列表</span></div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> outCount = <span class="number">0</span>;</div><div class="line">        Ivar *varList = class_copyIvarList(<span class="keyword">self</span>.class, &amp;outCount);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; outCount; i++) &#123;</div><div class="line">            Ivar tmpVar = varList[i];</div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(tmpVar);</div><div class="line">            <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithUTF8String:name];</div><div class="line">            <span class="comment">//从压缩包(aDecoder)中根据key解压缩出值</span></div><div class="line">            <span class="keyword">id</span> obj = [aDecoder decodeObjectForKey:propertyName];</div><div class="line">            [<span class="keyword">self</span> setValue:obj forKey:propertyName];</div><div class="line">        &#125;</div><div class="line">        free(varList);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h1 id="CoreData"><a href="#CoreData" class="headerlink" title="CoreData"></a>CoreData</h1>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;ios的文件管理有1.属性列表2.归档3.数据库(SQLite)4.coreData4种方式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;属性列表Plist&quot;&gt;&lt;a href=&quot;#属性列表Plist&quot; class=&quot;headerlink&quot; title=&quot;属性列表Plist&quot;&gt;&lt;/a&gt;属性列表Plist&lt;/h1&gt;&lt;h2 id=&quot;IPA的存储空间&quot;&gt;&lt;a href=&quot;#IPA的存储空间&quot; class=&quot;headerlink&quot; title=&quot;IPA的存储空间&quot;&gt;&lt;/a&gt;IPA的存储空间&lt;/h2&gt;&lt;h3 id=&quot;沙盒-Sandbox-读可写&quot;&gt;&lt;a href=&quot;#沙盒-Sandbox-读可写&quot; class=&quot;headerlink&quot; title=&quot;沙盒        Sandbox :读可写&quot;&gt;&lt;/a&gt;沙盒        Sandbox :读可写&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *docPath = &lt;span class=&quot;built_in&quot;&gt;NSSearchPathForDirectoriesInDomains&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSDocumentDirectory&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSUserDomainMask&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;).firstObject;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;应用程序文件-Bundle-只读&quot;&gt;&lt;a href=&quot;#应用程序文件-Bundle-只读&quot; class=&quot;headerlink&quot; title=&quot;应用程序文件 Bundle :只读&quot;&gt;&lt;/a&gt;应用程序文件 Bundle :只读&lt;/h3&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *settingPath = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] pathForResource:&lt;span class=&quot;string&quot;&gt;@&quot;Setting&quot;&lt;/span&gt; ofType:&lt;span class=&quot;string&quot;&gt;@&quot;plist&quot;&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;手动创建plist文件&quot;&gt;&lt;a href=&quot;#手动创建plist文件&quot; class=&quot;headerlink&quot; title=&quot;手动创建plist文件&quot;&gt;&lt;/a&gt;手动创建plist文件&lt;/h2&gt;&lt;h3 id=&quot;info-Plist&quot;&gt;&lt;a href=&quot;#info-Plist&quot; class=&quot;headerlink&quot; title=&quot;info.Plist&quot;&gt;&lt;/a&gt;info.Plist&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;系统plist文件&lt;/p&gt;
&lt;h4 id=&quot;通过对应的key获取info-plist中的信息&quot;&gt;&lt;a href=&quot;#通过对应的key获取info-plist中的信息&quot; class=&quot;headerlink&quot; title=&quot;通过对应的key获取info.plist中的信息&quot;&gt;&lt;/a&gt;通过对应的key获取info.plist中的信息&lt;/h4&gt;&lt;p&gt;如版本号versio&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *infoDic = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] infoDictionary];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *versionNumber = infoDic[versionKey];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="file system" scheme="http://sjc2wbq.github.io/tags/file-system/"/>
    
  </entry>
  
  <entry>
    <title>网络请求</title>
    <link href="http://sjc2wbq.github.io/2016/02/13/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82NSURLSession/"/>
    <id>http://sjc2wbq.github.io/2016/02/13/网络请求NSURLSession/</id>
    <published>2016-02-13T01:35:22.000Z</published>
    <updated>2016-05-20T04:06:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作流程（AFNetworking）"><a href="#工作流程（AFNetworking）" class="headerlink" title="工作流程（AFNetworking）"></a>工作流程（AFNetworking）</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h3><p>创建一个NSURLSessionConfiguration，用于第二步创建NSSession时设置工作模式和网络设置：</p>
<h3 id="网络设置"><a href="#网络设置" class="headerlink" title="网络设置"></a>网络设置</h3><p>创建一个NSURLSession，系统提供了两个创建方法：</p>
<h2 id="task"><a href="#task" class="headerlink" title="task"></a>task</h2><blockquote>
<p>创建一个NSURLRequest调用刚才的NSURLSession对象提供的Task函数，创建一个<strong>NSURLSessionTask</strong>。<br>根据职能不同Task有三种<strong>子类</strong>：<br>NSURLSessionUploadTask：上传用的Task，传完以后不会再下载返回结果；<br>NSURLSessionDownloadTask：下载用的Task；<br>NSURLSessionDataTask：可以上传内容，上传完成后再进行下载。</p>
</blockquote>
<a id="more"></a>
<h2 id="得到的Task，调用resume开始工作。"><a href="#得到的Task，调用resume开始工作。" class="headerlink" title="得到的Task，调用resume开始工作。"></a>得到的Task，调用resume开始工作。</h2><h2 id="解耦和封装网络请求处理"><a href="#解耦和封装网络请求处理" class="headerlink" title="解耦和封装网络请求处理"></a>解耦和封装网络请求处理</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+(<span class="keyword">id</span>)setServerListCompletionHandle:(<span class="keyword">void</span>(^)(<span class="built_in">NSArray</span> *model,<span class="built_in">NSError</span> *error))completionHandle;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sharedSession];</div><div class="line">   <span class="built_in">NSURLSessionTask</span> *task = [session dataTaskWithURL:[<span class="built_in">NSURL</span> URLWithString:kHeroAddress]</div><div class="line">                                  completionHandler:^(<span class="built_in">NSData</span> * _Nullable data, <span class="built_in">NSURLResponse</span> * _Nullable response, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">       <span class="comment">/*data参数是从 kHeroAddress上下载的数据</span></div><div class="line">        这个数据是服务器把字典/数组根据Json协议编码以后生成的</div><div class="line">        拿到Jason数据以后，反编码 回到字典或者数组</div><div class="line">       */</div><div class="line">       <span class="comment">//因为根据返回值类型，可以看到是字典类型的</span></div><div class="line">       <span class="comment">//Serialization:序列化</span></div><div class="line">       <span class="comment">//参数2：代表当前data的原始数据是什么类型</span></div><div class="line">       <span class="comment">//NSJSONReadingMutableContainers:代表原始数据是数组/字典</span></div><div class="line">       <span class="built_in">NSError</span> *err = <span class="literal">nil</span>;</div><div class="line">       <span class="built_in">NSDictionary</span> *responseObj;</div><div class="line">       reponseObj = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data</div><div class="line">                                                    options:<span class="built_in">NSJSONReadingMutableContainers</span></div><div class="line">                                                      error:&amp;err];</div><div class="line"><span class="meta">#warning 解析数据转化</span></div><div class="line">       <span class="keyword">self</span>.parse = [HerosParse parse:responseObj];</div><div class="line">       <span class="comment">//数据获取完以后，刷新界面，网络请求是子线程的，刷新界面需要回到主线程</span></div><div class="line">       <span class="comment">//开始发送请求</span></div><div class="line">       [[<span class="built_in">NSOperationQueue</span> mainQueue]addOperationWithBlock:^&#123;</div><div class="line">           [<span class="keyword">self</span>.tableView reloadData];</div><div class="line">       &#125;];</div><div class="line">   &#125;];</div><div class="line">   [task resume];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;工作流程（AFNetworking）&quot;&gt;&lt;a href=&quot;#工作流程（AFNetworking）&quot; class=&quot;headerlink&quot; title=&quot;工作流程（AFNetworking）&quot;&gt;&lt;/a&gt;工作流程（AFNetworking）&lt;/h1&gt;&lt;h2 id=&quot;环境配置&quot;&gt;&lt;a href=&quot;#环境配置&quot; class=&quot;headerlink&quot; title=&quot;环境配置&quot;&gt;&lt;/a&gt;环境配置&lt;/h2&gt;&lt;h3 id=&quot;工作模式&quot;&gt;&lt;a href=&quot;#工作模式&quot; class=&quot;headerlink&quot; title=&quot;工作模式&quot;&gt;&lt;/a&gt;工作模式&lt;/h3&gt;&lt;p&gt;创建一个NSURLSessionConfiguration，用于第二步创建NSSession时设置工作模式和网络设置：&lt;/p&gt;
&lt;h3 id=&quot;网络设置&quot;&gt;&lt;a href=&quot;#网络设置&quot; class=&quot;headerlink&quot; title=&quot;网络设置&quot;&gt;&lt;/a&gt;网络设置&lt;/h3&gt;&lt;p&gt;创建一个NSURLSession，系统提供了两个创建方法：&lt;/p&gt;
&lt;h2 id=&quot;task&quot;&gt;&lt;a href=&quot;#task&quot; class=&quot;headerlink&quot; title=&quot;task&quot;&gt;&lt;/a&gt;task&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;创建一个NSURLRequest调用刚才的NSURLSession对象提供的Task函数，创建一个&lt;strong&gt;NSURLSessionTask&lt;/strong&gt;。&lt;br&gt;根据职能不同Task有三种&lt;strong&gt;子类&lt;/strong&gt;：&lt;br&gt;NSURLSessionUploadTask：上传用的Task，传完以后不会再下载返回结果；&lt;br&gt;NSURLSessionDownloadTask：下载用的Task；&lt;br&gt;NSURLSessionDataTask：可以上传内容，上传完成后再进行下载。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="AFNetworking" scheme="http://sjc2wbq.github.io/tags/AFNetworking/"/>
    
  </entry>
  
  <entry>
    <title>Thread</title>
    <link href="http://sjc2wbq.github.io/2016/02/12/Thread/"/>
    <id>http://sjc2wbq.github.io/2016/02/12/Thread/</id>
    <published>2016-02-12T01:35:22.000Z</published>
    <updated>2016-05-20T04:07:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程的实现方式"><a href="#多线程的实现方式" class="headerlink" title="多线程的实现方式"></a>多线程的实现方式</h1><p> 1.pThread:最早期，纯c，兼容所有c语言基础的代码<br> 2.NSThread:本质上是使用oc对pThread的一个封装，是早期iOS使用的多线程<br> 3.GCD：使用C语法+block语法，目前为止，苹果主推的多线程技术，功能强大，效率高<br> 4.NSOperation：使用oc对GCD的封装，在GCD基础上额外增加了几个特性，不过效率没有GCD高，通常在不使用这些特性时，依然选择GCD</p>
<a id="more"></a>
<h2 id="NSThread"><a href="#NSThread" class="headerlink" title="NSThread"></a>NSThread</h2><h2 id="3GCD"><a href="#3GCD" class="headerlink" title="3GCD"></a>3GCD</h2><h3 id="进程锁"><a href="#进程锁" class="headerlink" title="进程锁"></a>进程锁</h3><h3 id="Barrier"><a href="#Barrier" class="headerlink" title="Barrier"></a>Barrier</h3><h3 id="GCD单例模式"><a href="#GCD单例模式" class="headerlink" title="GCD单例模式"></a>GCD单例模式</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">+(MySingle *)sharedMySingle&#123;</div><div class="line">    <span class="keyword">static</span> MySingle *my = <span class="literal">nil</span>;</div><div class="line">    <span class="comment">//传统的单例模式在多线程情况下容易出现同一时间被多线程同时调用的现象</span></div><div class="line">    <span class="comment">//基于线程安全的考虑，GCD提供了专门制作单例的代码</span></div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        my = [MySingle new];</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> my;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="NSOperation"><a href="#NSOperation" class="headerlink" title="NSOperation"></a>NSOperation</h2><h2 id="GCD与NSOperation的选择"><a href="#GCD与NSOperation的选择" class="headerlink" title="GCD与NSOperation的选择"></a>GCD与NSOperation的选择</h2><p>GCD是基于c的底层api，NSOperation属于object-c类。ios 首先引入的是NSOperation，IOS4之后引入了GCD和NSOperationQueue并且其内部是用gcd实现的。</p>
<p>相对于GCD：<br>1，NSOperation拥有更多的函数可用，具体查看api。<br>2，在NSOperationQueue中，可以建立各个NSOperation之间的依赖关系。<br>3，有kvo，可以监测operation是否正在执行（isExecuted）、是否结束（isFinished），是否取消（isCanceld）。<br>4，NSOperationQueue可以方便的管理并发、NSOperation之间的优先级。<br>GCD主要与block结合使用。代码简洁高效</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;多线程的实现方式&quot;&gt;&lt;a href=&quot;#多线程的实现方式&quot; class=&quot;headerlink&quot; title=&quot;多线程的实现方式&quot;&gt;&lt;/a&gt;多线程的实现方式&lt;/h1&gt;&lt;p&gt; 1.pThread:最早期，纯c，兼容所有c语言基础的代码&lt;br&gt; 2.NSThread:本质上是使用oc对pThread的一个封装，是早期iOS使用的多线程&lt;br&gt; 3.GCD：使用C语法+block语法，目前为止，苹果主推的多线程技术，功能强大，效率高&lt;br&gt; 4.NSOperation：使用oc对GCD的封装，在GCD基础上额外增加了几个特性，不过效率没有GCD高，通常在不使用这些特性时，依然选择GCD&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://sjc2wbq.github.io/categories/iOS/"/>
    
    
      <category term="thread" scheme="http://sjc2wbq.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>UISearch</title>
    <link href="http://sjc2wbq.github.io/2016/02/10/UISearch/"/>
    <id>http://sjc2wbq.github.io/2016/02/10/UISearch/</id>
    <published>2016-02-10T01:35:22.000Z</published>
    <updated>2016-03-02T04:23:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS8之前"><a href="#iOS8之前" class="headerlink" title="iOS8之前"></a>iOS8之前</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wait to add</div></pre></td></tr></table></figure>
<h1 id="iOS8之后"><a href="#iOS8之后" class="headerlink" title="iOS8之后"></a>iOS8之后</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()&lt;<span class="title">UISearchResultsUpdating</span>,<span class="title">UISearchBarDelegate</span>&gt;</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>) <span class="built_in">UISearchController</span> *searchC;</div><div class="line"></div><div class="line">- (<span class="built_in">UISearchController</span> *)searchC&#123;</div><div class="line">    <span class="keyword">if</span> (!_searchC) &#123;</div><div class="line">        _searchC = [[<span class="built_in">UISearchController</span> alloc]initWithSearchResultsController:[TableViewController new]];</div><div class="line">        _searchC.searchBar.scopeButtonTitles = @[<span class="string">@"Device"</span>,<span class="string">@"Soft"</span>,<span class="string">@"Other"</span>];</div><div class="line">        <span class="comment">//设置搜索结果发生变化时，代理由谁负责</span></div><div class="line">        _searchC.searchResultsUpdater = <span class="keyword">self</span>;</div><div class="line"><span class="meta">#warning 应对scope变化时的无法监听的问题</span></div><div class="line">        _searchC.searchBar.delegate = <span class="keyword">self</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _searchC;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#warning 应对scope变化时的无法监听的问题</span></div><div class="line"><span class="meta">#pragma mark - UISearchBar Delegate</span></div><div class="line">-(<span class="keyword">void</span>)searchBar:(<span class="built_in">UISearchBar</span> *)searchBar selectedScopeButtonIndexDidChange:(<span class="built_in">NSInteger</span>)selectedScope&#123;</div><div class="line">    [<span class="keyword">self</span> updateSearchResultsForSearchController:<span class="keyword">self</span>.searchC];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#warning 实际上scope选项变化时并没有触发</span></div><div class="line">-(<span class="keyword">void</span>)updateSearchResultsForSearchController:(<span class="built_in">UISearchController</span> *)searchController&#123;</div><div class="line">    <span class="built_in">NSString</span> *text = searchController.searchBar.text;</div><div class="line">    <span class="built_in">NSInteger</span> selectedIndex = searchController.searchBar.selectedScopeButtonIndex;</div><div class="line">    <span class="built_in">NSMutableArray</span> *tmpArr = [<span class="built_in">NSMutableArray</span> new];</div><div class="line">    <span class="keyword">for</span> (Product *p <span class="keyword">in</span> <span class="keyword">self</span>.dataList) &#123;</div><div class="line">        <span class="keyword">if</span> ([p.name containsString:text] &amp;&amp; p.type == selectedIndex) &#123;</div><div class="line">            [tmpArr addObject:p];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    TableViewController *vc = (TableViewController *)searchController.searchResultsController;</div><div class="line">    vc.resultArr = tmpArr;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS8之前&quot;&gt;&lt;a href=&quot;#iOS8之前&quot; class=&quot;headerlink&quot; title=&quot;iOS8之前&quot;&gt;&lt;/a&gt;iOS8之前&lt;/h1&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://sjc2wbq.github.io/2016/02/09/test/"/>
    <id>http://sjc2wbq.github.io/2016/02/09/test/</id>
    <published>2016-02-09T01:35:22.000Z</published>
    <updated>2016-05-20T04:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>一到家就各种出问题哦，哎哎哎，咋回事呢！咋回事呢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一到家就各种出问题哦，哎哎哎，咋回事呢！咋回事呢！&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
</feed>
